package JavaCore1.module1.sptint1.theme04.task0403;

import java.util.Scanner;

public class Praktikum {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.println("Сколько самокатов доступно для аренды?");
        int availableScooters = scanner.nextInt(); // Считайте количество доступных самокатов с клавиатуры

        System.out.println("Сколько самокатов арендовано?");
        int scootersInUse = scanner.nextInt(); // Считайте число арендованных самокатов с клавиатуры

        Scooter scooter = new Scooter(availableScooters, scootersInUse); // Создайте новый объект класса Scooter

        System.out.println("Что вы хотите сделать?");
        System.out.println("1 -- Узнать текущую стоимость проката");
        System.out.println("2 -- Выдать самокат");
        System.out.println("3 -- Принять самокат");
        System.out.println("4 -- Завершить работу");

        while (true) { // реализуйте непрерывный ввод команд
            System.out.println("Введите команду:");
            int command = scanner.nextInt(); // Считайте команду с клавиатуры

            if (command == 1) {
                scooter.getPrice(); // Вызовите нужный метод класса Scooter
            } else if (command == 2) {
                scooter.rentScooter(); // Вызовите нужный метод класса Scooter
            } else if (command == 3) {
                scooter.returnScooter(); // Вызовите нужный метод класса Scooter
            } else if (command == 4) {
                System.out.println("Сеанс работы завершён!");
                break; // Завершите ввод команд и работу программы
            } else {
                System.out.println("Введён неверный код команды.");
            }
        }
    }
}
/*
Менеджер отдал вам на доработку приложение для компании по прокату самокатов.
Заказчик просит, чтобы приложение умело рассчитывать цену аренды в моменты повышенного
спроса и вело учёт арендованных и возвращённых самокатов. Данные о количестве доступных
и выданных самокатов будет вводить администратор проката. Вам необходимо дописать код
строго в соответствии с техническим заданием:
Настройте считывание с клавиатуры значений переменных availableScooters и scootersInUse.
Реализуйте возможность вводить команды бесконечно. Не забудьте предусмотреть её завершение.
Внутри класса Scooter реализуйте методы rentScooter(), returnScooter() и getPrice():
Метод getPrice() должен вычислять текущую стоимость аренды currentPrice. Для этого
к числу арендованных скутеров scootersInUse надо прибавить 1, результат разделить
на число доступных скутеров availableScooters. Полученное частное умножить на добавочную
стоимость additionalPrice и прибавить к цене по умолчанию defaultPrice.
Метод rentScooter() должен обрабатывать выдачу самоката и сообщать администратору
текущую цену его аренды. Чтобы это сделать, нужно модифицировать формулу currentPrice —
перед проведением расчётов увеличить на единицу значение переменной scootersInUse,
а после их окончания уменьшить на единицу значение переменной availableScooters.
Вычисления в методах getPrice() и rentScooter() необходимо провести одной строкой.
Перед выполнением арифметических выражений в обоих методах нужно проверить наличие
доступных самокатов.
Метод returnScooter() должен учитывать возврат самоката: уменьшать на единицу
число арендованных самокатов и увеличивать на единицу число доступных самокатов.
При приёме нужно не забыть проверить, есть ли вообще несданные самокаты.
Внутри класса Praktikum создайте объект класса Scooter и вызовите методы
rentScooter(), returnScooter() и getPrice() в соответствии с меню доступных команд.

Для считывания данных из консоли воспользуйтесь методом scanner.nextInt().
Непрерывный ввод команд нужно реализовать с помощью цикла while (true).
Выход из непрерывного цикла осуществите с помощью команды break.
Формула по расчёту цены в методе getPrice() получится такой
defaultPrice + additionalPrice * ((scootersInUse + 1) / availableScooters).
Значения переменной scootersInUse не меняется, поэтому используется не инкремент,
а простое сложение.
В методах rentScooter() и returnScooter() нужны изменения переменной — используйте
декремент и инкремент.
В методе rentScooter() сначала увеличивается scootersInUse — нужен префиксный инкремент.
Переменная availableScooters уменьшается в самом конце — требуется постфиксный декремент.
Новому объекту класса Scooter нужно не забыть передать два аргумента —
new Scooter(availableScooters, scootersInUse).
Для вызова методов используется имя объекта и точечная нотация.
 */
